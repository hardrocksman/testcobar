<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd"
       default-lazy-init="false">

    <!-- 加载配置文件-->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>application.development.properties</value>
        </property>
    </bean>

    <!--数据源�-->
    <bean id="dataSources" class="com.alibaba.cobar.client.datasources.DefaultCobarDataSourceService">
        <property name="dataSourceDescriptors">
            <set>
                <bean class="com.alibaba.cobar.client.datasources.CobarDataSourceDescriptor">
                    <property name="identity" value="partition0"/>
                    <property name="targetDataSource" ref="dataSource0"/>
                    <property name="targetDetectorDataSource" ref="dataSource0"/>
                </bean>
                <bean class="com.alibaba.cobar.client.datasources.CobarDataSourceDescriptor">
                    <property name="identity" value="partition1"/>
                    <property name="targetDataSource" ref="dataSource1"/>
                    <property name="targetDetectorDataSource" ref="dataSource1"/>
                </bean>
                <bean class="com.alibaba.cobar.client.datasources.CobarDataSourceDescriptor">
                    <property name="identity" value="partition2"/>
                    <property name="targetDataSource" ref="dataSource2"/>
                    <property name="targetDetectorDataSource" ref="dataSource2"/>
                </bean>
            </set>
        </property>
        <property name="haDataSourceCreator">
            <bean class="com.alibaba.cobar.client.datasources.ha.FailoverHotSwapDataSourceCreator">
                <property name="detectingSql" value="update cobarha set timeflag=CURRENT_TIMESTAMP()"/>
            </bean>
        </property>
    </bean>

    <!-- 单个数据源� -->
    <bean id="dataSource0" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc0.url}" />
        <property name="username" value="${jdbc0.username}" />
        <property name="password" value="${jdbc0.password}" />
        <property name="filters" value="config" />
        <property name="maxActive" value="5" />
        <property name="initialSize" value="5" />
        <property name="maxWait" value="1" />
        <property name="minIdle" value="5" />
        <property name="timeBetweenEvictionRunsMillis" value="3000" />
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
        <!-- <property name="connectionProperties" value="config.decrypt=true" /> -->
    </bean>

    <!-- 数据源2� -->
    <bean id="dataSource1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc1.url}" />
        <property name="username" value="${jdbc1.username}" />
        <property name="password" value="${jdbc1.password}" />
        <property name="filters" value="config" />
        <property name="maxActive" value="5" />
        <property name="initialSize" value="5" />
        <property name="maxWait" value="1" />
        <property name="minIdle" value="5" />
        <property name="timeBetweenEvictionRunsMillis" value="3000" />
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
    </bean>

    <!-- 数据源3� -->
    <bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc2.url}" />
        <property name="username" value="${jdbc2.username}" />
        <property name="password" value="${jdbc2.password}" />
        <property name="filters" value="config" />
        <property name="maxActive" value="5" />
        <property name="initialSize" value="5" />
        <property name="maxWait" value="1" />
        <property name="minIdle" value="5" />
        <property name="timeBetweenEvictionRunsMillis" value="3000" />
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
    </bean>
	
	<!-- mybatis文件配置，扫描所有mapper文件 -->
    <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean"
          p:dataSource-ref="dataSource"
          p:configLocation="classpath:mybatis-config.xml"
          p:mapperLocations="classpath:mapper/*.xml">
          <!-- configLocation为mybatis属性 mapperLocations为所有mapper-->
    </bean>
       
   	<!-- spring与mybatis整合配置，扫描所有dao -->
 	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
        p:basePackage="com.zhl.test.rmi.hessianserver.dao"
        p:sqlSessionFactoryBeanName="sqlSessionFactory">
    </bean>
    
    <!-- 设定transactionManager -->
	<bean id="transactionManager"
	 class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	 <property name="dataSource" ref="dataSource" />
	</bean>
    
	<!--启动spring注解功能-->
	<tx:annotation-driven transaction-manager="transactionManager" />
</beans>